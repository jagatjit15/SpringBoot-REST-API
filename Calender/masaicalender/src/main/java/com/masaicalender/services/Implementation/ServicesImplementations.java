package com.masaicalender.services.Implementation;import com.masaicalender.dtos.LoginDto;import com.masaicalender.dtos.UserDto;import com.masaicalender.exceptions.EventNotFoundException;import com.masaicalender.exceptions.LoginException;import com.masaicalender.exceptions.UserNotFound;import com.masaicalender.module.Event;import com.masaicalender.module.LoginSession;import com.masaicalender.module.User;import com.masaicalender.repository.EventRepository;import com.masaicalender.repository.UserLoginSessionRepository;import com.masaicalender.repository.UserRepository;import com.masaicalender.services.EventServices;import com.masaicalender.services.UserService;import net.bytebuddy.utility.RandomString;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;import java.time.LocalDate;import java.time.LocalDateTime;import java.time.temporal.TemporalField;import java.time.temporal.WeekFields;import java.util.ArrayList;import java.util.List;import java.util.Locale;import java.util.Optional;@Servicepublic class ServicesImplementations implements UserService, EventServices {    @Autowired    private UserRepository userRepo;    @Autowired    private UserLoginSessionRepository loginSession;    @Autowired    private EventRepository eventRepo;    @Override    public String userRegistration(UserDto user) throws UserNotFound {        Optional<User> optional = userRepo.findById(user.getEmail());        if(optional.isEmpty()){            User newUser = new User();            newUser.setCreated(LocalDateTime.now());            newUser.setEmail(user.getEmail());            newUser.setMobileNumber(user.getMobileNumber());            newUser.setFirstName(user.getFirstName());            newUser.setPassword(user.getPassword());            newUser.setLastname(user.getLastname());            LocalDate dt = LocalDate.parse(user.getDateOfBirth());            newUser.setDateOfBirth(dt);            userRepo.save(newUser);            return "User Registered";        }      throw new UserNotFound("User already present");    }    @Override    public String userLogin(LoginDto userData) throws UserNotFound, LoginException {        Optional<User> optional = userRepo.findById(userData.getEmail());        if(optional.isPresent()){            LoginSession session = loginSession.findByEmail(userData.getEmail());            if(session == null){            	            	session = new LoginSession();            	                session.setEmail(userData.getEmail());                session.setTimeStamp(LocalDateTime.now());                String uuid = RandomString.make(10);                session.setSessionId(uuid);                loginSession.save(session);                return "Login successfully";            }            throw new LoginException("User already loggedIn");        }        throw new UserNotFound("No user found with email");    }    @Override    public List<Event> userEventsByType(String type, String email) throws UserNotFound, LoginException, EventNotFoundException {        LoginSession session = loginSession.findByEmail(email);        if(session != null){            List<Event> eventByType = new ArrayList<>();            Optional<User> optional = userRepo.findById(email);            User user = optional.get();            if(user.getEventList().isEmpty()) throw new EventNotFoundException("No event created");            List<Event> eventList = user.getEventList();            if(type.equalsIgnoreCase("week")){                for(Event event : eventList){                    LocalDate date = LocalDate. now();                    TemporalField woy = WeekFields. of(Locale. getDefault()). weekOfWeekBasedYear();                    int weekNumber = date. get(woy);                    LocalDate eventDate = event.getEventStartDate();                    int eventWeek = eventDate.get(woy);                    if(event.getEventStartDate().getMonth().equals(LocalDate.now().getMonth())                            && event.getEventStartDate().getYear() == LocalDate.now().getYear()                             && weekNumber == eventWeek)                        eventByType.add(event);                }            }            if(type.equalsIgnoreCase("month")){                for(Event event : eventList){                    if(event.getEventStartDate().getMonth().equals(LocalDate.now().getMonth())                       && event.getEventStartDate().getYear() == LocalDate.now().getYear())                        eventByType.add(event);                }            }            if(type.equalsIgnoreCase("Day")){                for(Event event : eventList){                    if(event.getEventStartDate().getMonth().equals(LocalDate.now().getMonth())                            && event.getEventStartDate().getYear() == LocalDate.now().getYear()                            && event.getEventStartDate().getDayOfMonth() == LocalDate.now().getDayOfMonth())                        eventByType.add(event);                }            }            if(eventByType.isEmpty()) throw new EventNotFoundException("No event found by "+ type);            return eventByType;        }      throw new LoginException("Please Login");    }    @Override    public String userUpdateDetails(UserDto user) throws UserNotFound, LoginException {        Optional<User> optional = userRepo.findById(user.getEmail());        if(optional.isPresent()){            User newUser = new User();            newUser.setCreated(LocalDateTime.now());            newUser.setEmail(user.getEmail());            newUser.setMobileNumber(user.getMobileNumber());            newUser.setFirstName(user.getFirstName());            newUser.setPassword(user.getPassword());            newUser.setLastname(user.getLastname());            LocalDate dt = LocalDate.parse(user.getDateOfBirth());            newUser.setDateOfBirth(dt);            userRepo.save(newUser);            return "User Details Updated";        }        throw new UserNotFound("User not found");    }    @Override    public String createEvent(Event event, String emailId) throws LoginException {        LoginSession session = loginSession.findByEmail(emailId);        if(session != null){            Optional<User> optional = userRepo.findById(emailId);            User user = optional.get();            List<Event> eventList = user.getEventList();            eventList.add(event);            user.setEventList(eventList);            eventRepo.save(event);            return "Event created";        }        throw new LoginException("Please Login");    }    @Override    public String updateEventById(Event event, Integer eventId, String emailId) throws EventNotFoundException, LoginException {        LoginSession session = loginSession.findByEmail(emailId);        if(session != null){            Optional<Event> optional = eventRepo.findById(eventId);            if(optional.isPresent()){                Event exist = optional.get();                exist.setEventName(event.getEventName());                exist.setEventEndDate(event.getEventEndDate());                exist.setEventEndTime(event.getEventEndTime());                exist.setEventStartTime(event.getEventStartTime());                exist.setEventStartDate(event.getEventStartDate());                Optional<User> userOptional = userRepo.findById(emailId);                User user = userOptional.get();                List<Event> eventList = user.getEventList();                for(Event ev : eventList){                    if(ev.getEvent_Id() == eventId){                        eventList.remove(ev);                        break;                    }                }                eventList.add(exist);                eventRepo.save(exist);                return "Updated";            }            throw  new EventNotFoundException("No event found with Id");        }        throw new LoginException("Login please");    }    @Override    public String deleteEventById(Integer eventId, String emailId) throws EventNotFoundException, LoginException {        LoginSession session = loginSession.findByEmail(emailId);        if(session != null){            Optional<Event> optional = eventRepo.findById(eventId);            if(optional.isPresent()){                Event event = optional.get();                Optional<User> userOptional = userRepo.findById(emailId);                User user = userOptional.get();                List<Event> eventList = user.getEventList();                eventList.remove(event);                eventRepo.delete(event);                return "Event Deleted";            }            throw  new EventNotFoundException("No event found with Id");        }        throw new LoginException("Login please");    }}